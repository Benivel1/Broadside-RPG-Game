<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <title>BROADSIDE as Warhead — Extended Text RPG (All Images Added)</title>
  <style>
    body {
      background: #222;
      color: #eee;
      font-family: 'Courier New', Courier, monospace;
      margin: 0;
      padding: 0;
    }
    #game-container {
      width: 80%;
      max-width: 850px;
      margin: 2em auto;
      background: #333;
      padding: 1em;
      border-radius: 4px;
    }
    #output {
      height: 400px;
      overflow-y: auto;
      background: #111;
      padding: 1em;
      margin-bottom: 1em;
      border-radius: 4px;
      white-space: pre-wrap;
      line-height: 1.4;
    }
    #input-area {
      display: flex;
      gap: 0.5em;
    }
    #user-input {
      flex: 1;
      padding: 0.5em;
      font-size: 1em;
      border: none;
      border-radius: 4px;
    }
    #submit-btn {
      padding: 0.5em 1em;
      font-size: 1em;
      background: #555;
      color: #eee;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    #submit-btn:hover {
      background: #666;
    }
    .scene-image,
    .intro-image,
    .victory-image {
      display: block;
      margin-top: 1em;
      max-width: 100%;
      border: 2px solid #fff;
    }
  </style>
</head>
<body>
<div id="game-container">
  <h2>BROADSIDE as Warhead — Extended Text RPG</h2>
  <div id="output"></div>
  <div id="input-area">
    <input type="text" id="user-input" placeholder="Type a command..." autofocus />
    <button id="submit-btn">GO</button>
  </div>
</div>

<script>
////////////////////////////////////////////////////////////////////////////////
// GLOBAL GAME STATE
////////////////////////////////////////////////////////////////////////////////
const gameState = {
  introMode: true,
  currentLocation: "warheadHome",
  inventory: [],
  visited: {},
  hasPrinterCode: false,
  printerFixed: false,
  hasBonesuit: false,
  matchLost: false,
  revolutionStarted: false,
  finalOutcome: null,
  gameOver: false
};

////////////////////////////////////////////////////////////////////////////////
// ITEMS
////////////////////////////////////////////////////////////////////////////////
const items = {
  oldPrinter: { 
    name: "oldPrinter",
    desc: "An ancient 3D printer at Warhead's home."
  },
  jammedFilament: { 
    name: "jammedFilament",
    desc: "A burnt lump of plastic from a jammed 3D printer."
  },
  backdoorCode: { 
    name: "backdoorCode",
    desc: "A slip with '3D1-FAZE-999' password."
  },
  warheadBonesuit: { 
    name: "warheadBonesuit",
    desc: "Warhead's battered junior league suit."
  },
  printerManual: { 
    name: "printerManual",
    desc: "Prota 3D1 manual, possibly with secrets."
  },
  bubbleTea: { 
    name: "bubbleTea",
    desc: "A refreshing drink from Bubble Kitchen."
  },
  bruteForce: { 
    name: "bruteForce",
    desc: "A hacking script by Warhead's father."
  },
  musicPlayer: {
    name: "musicPlayer",
    desc: "A built-in ShareCar audio system."
  },
  raveVehicle: {
    name: "raveVehicle",
    desc: "A neon 'rave tank' or modded 3D-printed car."
  },
  bonesuitUpgrade: {
    name: "bonesuitUpgrade",
    desc: "Advanced plating for unstoppable bonesuits."
  }
};

////////////////////////////////////////////////////////////////////////////////
// LOCATIONS WITH IMAGES
////////////////////////////////////////////////////////////////////////////////
const locations = {
  // 1) Warhead's Home
  warheadHome: {
    name: "Warhead's Home",
    desc: `
<img src="https://ibb.co/YF0fxVYc" alt="Warhead's apartment" class="scene-image"/>
A cramped apartment with an old 3D printer in the corner. 
Carlos and Riz worry about rent and the upcoming match.

You can also visit your father in the VR Den if you wish, to see if he can help...
(try: move vrDen)
`,
    items: ["oldPrinter"],
    npcs: [
      {
        name: "Carlos",
        desc: "Warhead's older brother, anxious about finances.",
        talk: [
          "'We're behind on rent. Fix that printer at Noe Valley ASAP.'",
          "'Meet me in the ShareCar after, then let's do the match.'"
        ]
      },
      {
        name: "Riz",
        desc: "A close friend who also plays Broadside.",
        talk: [
          "'Senior league is tough, Warhead, but let's try anyway.'",
          "'I won't touch that old printer, I'd break it.'"
        ]
      }
    ],
    exits: {
      move: {
        vrDen: "vrDen",
        townhouse: "janeTownhouse"
      }
    }
  },

  // 2) Dad's VR Den
  vrDen: {
    name: "Dad's VR Den",
    desc: `
<img src="https://ibb.co/G4f9Z50D" alt="Dad's VR Den" class="scene-image"/>
You enter a dark corner of the apartment building, where your father 
spends most of his time logged into the metaverse. 
Neon lights flicker from the battered VR rig. 
Your father slumps in a worn-out chair, half-lost in some virtual realm.
`,
    items: [],
    npcs: [
      {
        name: "Father",
        desc: "Warhead's father, half-awake, muttering about old code.",
        talk: [
          "'Mmm... War... Warhead? The code... I made it back in '29... bzz...'",
          "'Brute Force... it can open any system, any printer. Just... be careful...' (He drifts away)"
        ]
      }
    ],
    exits: {
      move: {
        warheadHome: "warheadHome"
      }
    }
  },

  // 3) Jane's Townhouse
  janeTownhouse: {
    name: "Jane's Townhouse",
    desc: `
<img src="https://ibb.co/NnGrHqPk" alt="Jane's apartment" class="scene-image"/>
An ultra-modern home with a giant Prota 3D1. 
Jane Stratton demands it be fixed quickly or no tip.
`,
    items: ["printerManual"],
    npcs: [
      {
        name: "Jane",
        desc: "A stylish Prota employee, unimpressed by your lateness.",
        talk: [
          "'You're late. Fix my 3D1 or no tip.'",
          "'It's jammed for the second time this month!'"
        ]
      }
    ],
    exits: {
      move: {
        shareCar: "shareCar"
      }
    }
  },

  // 4) ShareCar
  shareCar: {
    name: "ShareCar",
    desc: `
<img src="https://ibb.co/R4bWWMVZ" alt="ShareCar" class="scene-image"/>
A dingy self-driving pod. Carlos and Riz wave you in. 
There's a musicPlayer on the console. Next stop: the checkpoint.
`,
    items: ["musicPlayer"],
    npcs: [
      {
        name: "Carlos",
        desc: "He’s checking gear for the senior match.",
        talk: [
          "'Hope you fixed that printer. We need the money.'",
          "'We gotta hurry or we'll be late to the match.'"
        ]
      },
      {
        name: "Riz",
        desc: "Quietly scrolling LuminOS.",
        talk: [
          "'You see the new NFT armor Rug Mob has? It's insane.'",
          "'Don't anger the Marshals at the checkpoint, Warhead.'"
        ]
      }
    ],
    exits: {
      move: {
        checkpoint: "checkpoint"
      }
    }
  },

  // 5) Prota Checkpoint
  checkpoint: {
    name: "Prota Checkpoint",
    desc: `
<img src="https://ibb.co/TDVVC1Pf" alt="Prota checkpoint" class="scene-image"/>
A fortified arch. Marshals scan for unauthorized gear. 
One stares at you, expecting compliance.
`,
    items: [],
    npcs: [
      {
        name: "Marshal",
        desc: "A red-and-white robot scanning IDs.",
        talk: [
          "'PRESENT IDENTIFICATION, CITIZEN.'",
          "'COMPLY OR FACE CONSEQUENCES.'"
        ]
      }
    ],
    exits: {
      move: {
        arena: "broadsideArena"
      }
    }
  },

  // 6) Broadside Arena
  broadsideArena: {
    name: "Broadside Arena",
    desc: `
<img src="https://ibb.co/cBk174z" alt="Broadside arena" class="scene-image"/>
A repurposed warehouse for the senior league. 
Rug Mob is here with top-tier gear. Carlos and Riz get suited up.

(After losing here, you can move to 'darkestHour' to see Warhead at a low point.)
`,
    items: [],
    npcs: [
      {
        name: "Jason",
        desc: "Leader of Rug Mob, cocky and well-funded.",
        talk: [
          "'Skeleton Crew? Easy pickings.'",
          "'A junior in a senior match is a violation, man.'"
        ]
      },
      {
        name: "Shiv",
        desc: "A huge figure with brand new armor.",
        talk: [
          "'Got your gear, Warhead? We got rockets.'",
          "'We'll see what you got, kid.'"
        ]
      }
    ],
    exits: {
      move: {
        darkestHour: "darkestHour",
        slumTowers: "slumTowers"
      }
    }
  },

  // 7) Darkest Hour (Night of Despair)
  darkestHour: {
    name: "Night of Despair",
    desc: `
<img src="https://ibb.co/45f1MJW" alt="Darkest Hour" class="scene-image"/>
You wander through a desolate side street, neon reflections in puddles. 
Your team lost. Marshals lurk around the corner. 
You feel there's no way out—Prota seems invincible.

Carlos is nowhere to be found. Riz might be hurt. 
This is your lowest point.
`,
    items: [],
    npcs: [
      {
        name: "Warhead",
        desc: "You, at your absolute low. Internal monologue only.",
        talk: [
          "(You mutter) 'We've lost everything... the system's rigged... maybe Dad's code is our only chance...'"
        ]
      }
    ],
    exits: {
      move: {
        slumTowers: "slumTowers"
      }
    }
  },

  // 8) Slum Towers
  slumTowers: {
    name: "South SF Slum Towers",
    desc: `
<img src="https://ibb.co/9mLn1s1Q" alt="South SF slum towers" class="scene-image"/>
You lost the match. Carlos is furious, Riz is upset. Marshals roam these towers. 
Zero hints at hacking Prota with something called 'Brute Force.'
(Now you can move to a 'printFarm' if you discovered Brute Force, or go to bubbleKitchen.)
`,
    items: [],
    npcs: [
      {
        name: "Riz",
        desc: "Shaken by the defeat.",
        talk: [
          "'Rug Mob hammered us. They had insane gear.'",
          "'We might need a hack to fight Prota's advantage... Brute Force, maybe?'"
        ]
      },
      {
        name: "Zero",
        desc: "A dreadlocked activist who despises Prota.",
        talk: [
          "'Heard you got burned. The system is rigged, kid.'",
          "'Brute Force is real. If your father wrote it, maybe you can finish it.'"
        ]
      }
    ],
    exits: {
      move: {
        printFarm: "printFarm",
        bubbleKitchen: "bubbleKitchen"
      }
    }
  },

  // 9) Print Farm (Hacked)
  printFarm: {
    name: "Hacked Print Farm",
    desc: `
<img src="https://ibb.co/1CY55VM" alt="Broadsiders Hacked Print Farm" class="scene-image"/>
A hidden warehouse full of advanced 3D printers, seized or salvaged by rebels. 
Now that you have Brute Force, you can print anything— 
including bonesuit upgrades and 'rave vehicles' to fight Marshals in style.
`,
    items: [],
    npcs: [
      {
        name: "TechEngineer",
        desc: "An activist engineer overseeing the print jobs.",
        talk: [
          "'Finally, with your hack, we can print unstoppable gear.'",
          "'We're making 'rave vehicles'—like mobile disco tanks for infiltration.'"
        ]
      }
    ],
    exits: {
      move: {
        bubbleKitchen: "bubbleKitchen"
      }
    }
  },

  // 10) Bubble Kitchen
  bubbleKitchen: {
    name: "Bubble Kitchen",
    desc: `
<img src="https://ibb.co/m5Q07zNc" alt="Bubble Kitchen" class="scene-image"/>
A neon-lit fast-food joint. Koth and Omar linger, the smell of vat-grown chicken thick. 
A battered 3D printer hums in the corner.
`,
    items: ["bubbleTea"],
    npcs: [
      {
        name: "Koth",
        desc: "Small, muscular, wants to go pro in Broadside.",
        talk: [
          "'Rug Mob can’t be beaten fairly, they have all the best gear.'",
          "'Brute Force might help you if you want real change.'"
        ]
      },
      {
        name: "Omar",
        desc: "Heavyset, calm sniper. Possibly an ally.",
        talk: [
          "'Heard Marshals can be hijacked if you have the right code.'",
          "'We'll back you if you take on Prota HQ.'"
        ]
      }
    ],
    exits: {
      move: {
        finalConfrontation: "finalConfrontation"
      }
    }
  },

  // 11) Final Confrontation
  finalConfrontation: {
    name: "Prota HQ Rooftop",
    desc: `
<img src="https://ibb.co/qLg3XSsP" alt="Prota HQ rooftop" class="scene-image"/>
The glass pyramid of Prota HQ. Marshals swarm. 
A stealth drone spotlights you. SamKore appears on a holo-screen.

(After you hack prota hq, consider moving epilogue to see the aftermath.)
`,
    items: [],
    npcs: [
      {
        name: "SamKore",
        desc: "CEO of Prota, rarely seen in person.",
        talk: [
          "'Foolish kids. You think you can break our system?'",
          "'Put down your hack. I'll make you rich.'"
        ]
      }
    ],
    exits: {
      move: {
        epilogue: "epilogue"
      }
    }
  },

  // 12) Epilogue (Return with the Elixir)
  epilogue: {
    name: "Epilogue",
    desc: `
<img src="https://ibb.co/chfQfcm" alt="Cyberpunk Epilogue" class="scene-image"/>
Marshals have been disabled, Prota’s hold broken. 
All across the city, people celebrate free 3D printing. 
Slum Towers can finally produce crucial goods—medicine, bonesuits, water filters.

You see kids printing toy vehicles or bonesuit parts, forging a new future.
`,
    items: [],
    npcs: [
      {
        name: "StreetKid",
        desc: "A wide-eyed kid printing a new world.",
        talk: [
          "'You did it, Warhead! We can print anything now. Thank you!'",
          "'No more Prota lockouts, thanks to Brute Force.'"
        ]
      }
    ],
    exits: {
      move: {
        // end
      }
    }
  }
};

////////////////////////////////////////////////////////////////////////////////
// OUTPUT / INTRO
////////////////////////////////////////////////////////////////////////////////
function print(text) {
  const outputEl = document.getElementById("output");
  outputEl.innerHTML += text + "\n";
  outputEl.scrollTop = outputEl.scrollHeight;
}

function showIntroScreen() {
  const outputEl = document.getElementById("output");
  outputEl.innerHTML = "";
  print("BSIDE 2037 - HYPER RPG\n");
  // The main intro image (unchanged from previous code, you can alter if you like)
  print("<img src='https://cdn.discordapp.com/attachments/1342947321557680260/1344875088083947632/IMG_4759.jpg' alt='Broadside Intro Image' class='intro-image'/>");
  print("\nType 'start' to begin the game, or 'help' for info.");
}

////////////////////////////////////////////////////////////////////////////////
// SHOW LOCATION
////////////////////////////////////////////////////////////////////////////////
function showLocation(locationKey) {
  const loc = locations[locationKey];
  print(`\n== ${loc.name} ==\n`);
  print(loc.desc);

  if (!gameState.visited[locationKey]) {
    gameState.visited[locationKey] = true;
  }
  showActions(locationKey);
}

function showActions(locationKey) {
  if (gameState.gameOver) {
    print("\nGAME OVER. Type 'help' or refresh to restart.");
    return;
  }

  const loc = locations[locationKey];
  let actions = [];

  loc.npcs.forEach(npc => actions.push(`talk ${npc.name.toLowerCase()}`));
  loc.items.forEach(itemName => actions.push(`take ${itemName}`));

  if (loc.exits && loc.exits.move) {
    for (const destination in loc.exits.move) {
      actions.push(`move ${destination}`);
    }
  }

  actions.push("use <item>");
  actions.push("hack <target>");
  actions.push("look");
  actions.push("inventory");
  actions.push("help");

  print(`\nAvailable actions: ${actions.join(", ")}`);
}

////////////////////////////////////////////////////////////////////////////////
// BASIC COMMANDS
////////////////////////////////////////////////////////////////////////////////
function lookAround() {
  if (gameState.gameOver) {
    print("You can't do that. The game is over.");
    return;
  }
  const loc = locations[gameState.currentLocation];
  let msg = "";
  if (loc.items.length > 0) {
    msg += "Items here: " + loc.items.join(", ") + "\n";
  }
  if (loc.npcs.length > 0) {
    msg += "You see: " + loc.npcs.map(n => n.name).join(", ");
  }
  if (!msg) {
    msg = "Nothing special catches your eye.";
  }
  print(msg);
}

function tryMove(targetLocation) {
  if (gameState.gameOver) {
    print("Game is over, can't move.");
    return;
  }

  const currentLocObj = locations[gameState.currentLocation];
  if (!currentLocObj.exits || !currentLocObj.exits.move) {
    print(`You can't go to '${targetLocation}' from here.`);
    return;
  }

  const exitsObj = currentLocObj.exits.move;
  const normTarget = Object.keys(exitsObj).find(
    k => k.toLowerCase() === targetLocation.toLowerCase()
  );
  if (!normTarget) {
    print(`You can't go to '${targetLocation}' from here.`);
    return;
  }

  gameState.currentLocation = exitsObj[normTarget];
  showLocation(gameState.currentLocation);
}

function talkTo(npcName) {
  if (gameState.gameOver) {
    print("Game is over, can't talk.");
    return;
  }
  const loc = locations[gameState.currentLocation];
  const npc = loc.npcs.find(n => n.name.toLowerCase() === npcName.toLowerCase());
  if (!npc) {
    print(`No one named '${npcName}' here.`);
    return;
  }
  const line = npc.talk[Math.floor(Math.random() * npc.talk.length)];
  print(`${npc.name} says: "${line}"`);

  // If Zero => grant bruteForce
  if (npc.name.toLowerCase() === "zero" && !gameState.inventory.includes("bruteForce")) {
    print("Zero hands you the 'bruteForce' script!");
    gameState.inventory.push("bruteForce");
  }

  // If Marshal at checkpoint => user shows ID
  if (npc.name.toLowerCase() === "marshal" && gameState.currentLocation === "checkpoint") {
    print("You begrudgingly show your ID. The Marshal steps aside.");
  }
}

function takeItem(itemName) {
  if (gameState.gameOver) {
    print("Game over, can't take items.");
    return;
  }
  const loc = locations[gameState.currentLocation];
  const idx = loc.items.findIndex(i => i.toLowerCase() === itemName.toLowerCase());
  if (idx === -1) {
    print(`No item '${itemName}' here to take.`);
    return;
  }
  const realItem = loc.items[idx];
  if (realItem === "musicPlayer") {
    print("It's built into the ShareCar; you can't take it.");
    return;
  }
  loc.items.splice(idx, 1);
  gameState.inventory.push(realItem);
  print(`You pick up the ${realItem}.`);
}

function showInventory() {
  if (gameState.gameOver) {
    print("GAME OVER. Inventory doesn't matter now.");
    return;
  }
  if (gameState.inventory.length === 0) {
    print("You have no items.");
  } else {
    print("Your inventory: " + gameState.inventory.join(", "));
  }
}

function showHelp() {
  if (gameState.gameOver) {
    print("GAME OVER. Refresh to restart.");
    return;
  }
  if (gameState.introMode) {
    print("Type 'start' to begin the game or refresh to reload the intro.");
    return;
  }
  print(`Commands:
- start (only valid on intro screen)
- look
- move <location>
- talk <npc>
- take <item>
- use <item>
- hack <target>
- inventory
- help

Items that might appear: oldPrinter, jammedFilament, backdoorCode, warheadBonesuit,
printerManual, bubbleTea, bruteForce, musicPlayer, bonesuitUpgrade, raveVehicle
`);
}

////////////////////////////////////////////////////////////////////////////////
// USE COMMAND
////////////////////////////////////////////////////////////////////////////////
function useItem(itemName) {
  if (gameState.gameOver) {
    print("Game over, can't use items.");
    return;
  }
  const invIndex = gameState.inventory.findIndex(
    i => i.toLowerCase() === itemName.toLowerCase()
  );
  const hasItem = invIndex !== -1;

  if (!hasItem) {
    // Could be location-bound item (musicPlayer)
    const loc = locations[gameState.currentLocation];
    const locIndex = loc.items.findIndex(
      i => i.toLowerCase() === itemName.toLowerCase()
    );
    if (locIndex !== -1 && loc.items[locIndex] === "musicPlayer") {
      if (gameState.currentLocation === "shareCar") {
        print("You tap the music player. A jungle beat blasts from the speakers!");
        print("Carlos and Riz nod along to the rhythm.");
      } else {
        print("You can't power the music player here.");
      }
      return;
    }
    print(`You don't have '${itemName}' and it's not usable here.`);
    return;
  }

  // We do have the item
  const realItem = gameState.inventory[invIndex];
  switch (realItem) {
    case "printerManual":
      print("Flipping through the Prota 3D1 manual...");
      if (!gameState.hasPrinterCode) {
        print("A note: 'ADMIN CODE: 3D1-FAZE-999'. Must be important!");
        gameState.hasPrinterCode = true;
        locations[gameState.currentLocation].items.push("backdoorCode");
        print("A slip of paper (backdoorCode) falls out onto the floor!");
      } else {
        print("No new info. You already know the code.");
      }
      break;
    case "bubbleTea":
      print("You sip the tea. Refreshing, but that's it.");
      break;
    case "oldPrinter":
      print("It's too big to do anything with here. Maybe 'hack oldPrinter' at Warhead's Home?");
      break;
    default:
      print(`Nothing special happens when you use ${realItem}.`);
  }
}

////////////////////////////////////////////////////////////////////////////////
// HACK COMMAND
////////////////////////////////////////////////////////////////////////////////
function hackTarget(target) {
  if (gameState.gameOver) {
    print("Game is over, can't hack now.");
    return;
  }
  const loc = locations[gameState.currentLocation];

  // Hack Marshal at checkpoint => ARREST => game over
  if (target === "marshal" && gameState.currentLocation === "checkpoint") {
    print("You attempt to hack the Marshal, it detects you instantly...");
    print("Alarms blare! Marshals swarm in. You're arrested, never seen again.");
    print("GAME OVER!");
    gameState.gameOver = true;
    return;
  }

  // hack 3D1 in JaneTownhouse
  if (target === "3d1" && gameState.currentLocation === "janeTownhouse") {
    if (!gameState.hasPrinterCode) {
      print("No success. You might need the admin code first.");
    } else {
      print("You enter '3D1-FAZE-999', the jammed printer whirs back to life!");
      gameState.printerFixed = true;
      print("Jane smirks: 'At least you did your job. Maybe I'll tip you well.'");
    }
    return;
  }

  // hack oldPrinter at warheadHome
  if (target === "oldprinter" && gameState.currentLocation === "warheadHome") {
    print("You tinker with the broken printer...");
    if (!loc.items.includes("jammedFilament") &&
        !gameState.inventory.includes("jammedFilament")) {
      loc.items.push("jammedFilament");
      print("You yank out a melted chunk of jammedFilament from its guts.");
    } else {
      print("You've already salvaged what you can.");
    }
    return;
  }

  // hack Marshal at finalConfrontation
  if (target === "marshal" && gameState.currentLocation === "finalConfrontation") {
    print("You attempt to hack the advanced Marshals...");
    if (gameState.inventory.includes("bruteForce") && !gameState.revolutionStarted) {
      print("They glitch out, turning on SamKore's forces. The revolution begins!");
      gameState.revolutionStarted = true;
    } else {
      print("They block you. Maybe you lack 'bruteForce' or did this already.");
    }
    return;
  }

  // hack prota hq => final revolution
  if (target === "prota hq" && gameState.currentLocation === "finalConfrontation") {
    if (gameState.inventory.includes("bruteForce") && !gameState.revolutionStarted) {
      print("You unleash Brute Force on Prota's core systems, disabling Marshals en masse!");
      print("SamKore's holo-screen flickers in outrage. The city rises up in protest!");
      gameState.revolutionStarted = true;
      gameState.finalOutcome = "revolution";
      print("YOU HAVE STARTED A REVOLUTION!\n");
      // final image
      print("<img src='https://cdn.discordapp.com/attachments/1342947321557680260/1344875088083947632/IMG_4759.jpg' alt='Broadside Victory Image' class='victory-image'/>");
      print("NONE OF THEM ARE AS STRONG AS ALL OF US");
    } else {
      print("You either lack 'bruteForce' or you've already triggered the revolution.");
    }
    return;
  }

  // hack bruteforce => not valid
  if (target === "bruteforce") {
    print("You open the script. It's not hackable itself; use it on something else!");
    return;
  }

  print(`Hacking '${target}' is not recognized or not possible here.`);
}

////////////////////////////////////////////////////////////////////////////////
// INTRO + MAIN LOOP
////////////////////////////////////////////////////////////////////////////////
function initGame() {
  showIntroScreen();
}

function handleInput(input) {
  const raw = input.trim();
  if (!raw) return;

  if (gameState.introMode) {
    const lower = raw.toLowerCase();
    if (lower === "start") {
      gameState.introMode = false;
      print("\nStarting the game...\n");
      showLocation(gameState.currentLocation);
    } else if (lower === "help") {
      print("Type 'start' to begin the game or refresh to reload the intro.");
    } else {
      print("Please type 'start' to begin, or 'help' for info.");
    }
    return;
  }

  if (gameState.gameOver) {
    if (raw.toLowerCase() === "help") {
      showHelp();
    } else {
      print("GAME OVER. Refresh the page to start again.");
    }
    return;
  }

  print("> " + raw);
  const lower = raw.toLowerCase();
  const words = lower.split(" ");
  const cmd = words[0];

  switch (cmd) {
    case "look":
      lookAround();
      break;
    case "move":
      if (words.length < 2) {
        print("Move where?");
      } else {
        tryMove(words[1]);
      }
      break;
    case "talk":
      if (words.length < 2) {
        print("Talk to whom?");
      } else {
        talkTo(words[1]);
      }
      break;
    case "take":
      if (words.length < 2) {
        print("Take what?");
      } else {
        takeItem(words[1]);
      }
      break;
    case "inventory":
      showInventory();
      break;
    case "help":
      showHelp();
      break;
    case "use":
      if (words.length < 2) {
        print("Use what?");
      } else {
        useItem(words[1]);
      }
      break;
    case "hack":
      if (words.length < 2) {
        print("Hack what?");
      } else {
        hackTarget(words.slice(1).join(" "));
      }
      break;
    default:
      print("Unknown command. Type 'help' or see 'Available actions' above.");
      break;
  }
}

// Start
document.getElementById("submit-btn").addEventListener("click", function() {
  const userInput = document.getElementById("user-input");
  const text = userInput.value;
  userInput.value = "";
  if (text.length > 0) {
    handleInput(text);
  }
  userInput.focus();
});

document.getElementById("user-input").addEventListener("keypress", function(e) {
  if (e.key === "Enter") {
    document.getElementById("submit-btn").click();
  }
});

initGame();
</script>
</body>
</html>